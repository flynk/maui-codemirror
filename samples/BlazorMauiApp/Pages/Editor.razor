@page "/editor"
@using MAUI.CodeMirror.Blazor
@using Flynk.Apps.Maui.CodeMirror.Models
@using Flynk.Apps.Maui.CodeMirror.Services

<div class="container">
    <h3>Blazor CodeMirror Editor</h3>
    
    <div class="toolbar">
        <div class="control-group">
            <label>Language:</label>
            <select @bind="selectedLanguage" @bind:after="OnLanguageChanged">
                <option value="javascript">JavaScript</option>
                <option value="typescript">TypeScript</option>
                <option value="python">Python</option>
                <option value="csharp">C#</option>
                <option value="html">HTML</option>
                <option value="css">CSS</option>
                <option value="json">JSON</option>
            </select>
        </div>
        
        <div class="control-group">
            <label>Theme:</label>
            <select @bind="selectedTheme" @bind:after="OnThemeChanged">
                <option value="oneDark">One Dark</option>
                <option value="githubDark">GitHub Dark</option>
                <option value="githubLight">GitHub Light</option>
                <option value="dracula">Dracula</option>
                <option value="monokai">Monokai</option>
            </select>
        </div>
        
        <div class="control-group">
            <label>
                <input type="checkbox" @bind="showLineNumbers" @bind:after="OnOptionsChanged" />
                Line Numbers
            </label>
        </div>
        
        <div class="control-group">
            <label>
                <input type="checkbox" @bind="readOnly" @bind:after="OnReadOnlyChanged" />
                Read Only
            </label>
        </div>
    </div>
    
    <div class="editor-container">
        <CodeMirrorComponent @ref="editor"
                            Language="@selectedLanguage"
                            Theme="@selectedTheme"
                            LineNumbers="@showLineNumbers"
                            ReadOnly="@readOnly"
                            AutoComplete="true"
                            FoldGutter="true"
                            Style="width: 100%; height: 500px; border: 1px solid #ccc;"
                            OnSelectionChange="OnSelectionChange"
                            OnCursorActivity="OnCursorActivity"
                            OnFocus="OnFocus"
                            OnBlur="OnBlur" />
    </div>
    
    <div class="status-bar">
        <span>@statusText</span>
        <span>Line @cursorLine, Col @cursorColumn</span>
        <span>@(editorValue?.Length ?? 0) characters</span>
    </div>
    
    <div class="actions">
        <button @onclick="LoadSample">Load Sample</button>
        <button @onclick="Clear">Clear</button>
        <button @onclick="GetValue">Get Value</button>
        <button @onclick="Format">Format</button>
        <button @onclick="Undo">Undo</button>
        <button @onclick="Redo">Redo</button>
        <button @onclick="GoToLine">Go to Line 10</button>
    </div>
    
    @if (!string.IsNullOrEmpty(outputText))
    {
        <div class="output">
            <h4>Output:</h4>
            <pre>@outputText</pre>
        </div>
    }
</div>

<style>
    .container {
        padding: 20px;
        max-width: 1200px;
        margin: 0 auto;
    }
    
    .toolbar {
        display: flex;
        gap: 20px;
        margin-bottom: 10px;
        padding: 10px;
        background: #f5f5f5;
        border-radius: 4px;
    }
    
    .control-group {
        display: flex;
        align-items: center;
        gap: 5px;
    }
    
    .control-group label {
        margin: 0;
    }
    
    .editor-container {
        margin: 20px 0;
    }
    
    .status-bar {
        display: flex;
        justify-content: space-between;
        padding: 5px 10px;
        background: #f0f0f0;
        font-size: 0.9em;
    }
    
    .actions {
        margin-top: 10px;
        display: flex;
        gap: 10px;
    }
    
    .actions button {
        padding: 8px 16px;
        background: #007bff;
        color: white;
        border: none;
        border-radius: 4px;
        cursor: pointer;
    }
    
    .actions button:hover {
        background: #0056b3;
    }
    
    .output {
        margin-top: 20px;
        padding: 15px;
        background: #f8f9fa;
        border-radius: 4px;
    }
    
    .output pre {
        margin: 0;
        white-space: pre-wrap;
        word-break: break-all;
    }
</style>

@code {
    private CodeMirrorComponent? editor;
    private string selectedLanguage = "typescript";
    private string selectedTheme = "githubDark";
    private bool showLineNumbers = true;
    private bool readOnly = false;
    private string statusText = "Ready";
    private int cursorLine = 1;
    private int cursorColumn = 1;
    private string? editorValue;
    private string? outputText;
    
    private readonly Dictionary<string, string> sampleCode = new()
    {
        ["typescript"] = @"// TypeScript Example
const x: number = 42;

interface Person {
    name: string;
    age: number;
}

function greet(person: Person): string {
    return `Hello, ${person.name}! You are ${person.age} years old.`;
}

const user: Person = {
    name: 'Alice',
    age: 30
};

console.log(greet(user));",
        
        ["javascript"] = @"// JavaScript Example
function fibonacci(n) {
    if (n <= 1) return n;
    return fibonacci(n - 1) + fibonacci(n - 2);
}

console.log(fibonacci(10));",
        
        ["python"] = @"# Python Example
def factorial(n):
    if n == 0:
        return 1
    return n * factorial(n - 1)

print(f'Factorial of 5: {factorial(5)}')",
        
        ["csharp"] = @"// C# Example
using System;
using System.Linq;

var numbers = Enumerable.Range(1, 10);
var evenSquares = numbers
    .Where(n => n % 2 == 0)
    .Select(n => n * n);

Console.WriteLine(string.Join(", ", evenSquares));"
    };
    
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && editor is not null)
        {
            await LoadSample();
        }
    }
    
    private async Task OnLanguageChanged()
    {
        if (editor != null)
        {
            await editor.SetLanguageAsync(selectedLanguage);
            await LoadSample();
        }
    }
    
    private async Task OnThemeChanged()
    {
        if (editor != null)
        {
            await editor.SetThemeAsync(selectedTheme);
        }
    }
    
    private async Task OnOptionsChanged()
    {
        // Options will be updated through binding
    }
    
    private async Task OnReadOnlyChanged()
    {
        if (editor != null)
        {
            await editor.SetReadOnlyAsync(readOnly);
            statusText = readOnly ? "Read-only mode" : "Edit mode";
        }
    }
    
    private async Task LoadSample()
    {
        if (editor != null && sampleCode.TryGetValue(selectedLanguage, out var code))
        {
            await editor.SetValueAsync(code);
            editorValue = code;
            statusText = $"Loaded {selectedLanguage} sample";
        }
    }
    
    private async Task Clear()
    {
        if (editor != null)
        {
            await editor.SetValueAsync("");
            editorValue = "";
            statusText = "Editor cleared";
            outputText = null;
        }
    }
    
    private async Task GetValue()
    {
        if (editor != null)
        {
            var value = await editor.GetValueAsync();
            outputText = $"Editor content ({value.Length} characters):\n\n{value}";
        }
    }
    
    private async Task Format()
    {
        if (editor != null)
        {
            await editor.FormatAsync();
            statusText = "Code formatted";
        }
    }
    
    private async Task Undo()
    {
        if (editor != null)
        {
            await editor.UndoAsync();
            statusText = "Undo performed";
        }
    }
    
    private async Task Redo()
    {
        if (editor != null)
        {
            await editor.RedoAsync();
            statusText = "Redo performed";
        }
    }
    
    private async Task GoToLine()
    {
        if (editor != null)
        {
            await editor.SetCursorPositionAsync(10, 1);
            statusText = "Moved to line 10";
        }
    }
    
    private void OnSelectionChange(SelectionChangeEventArgs args)
    {
        statusText = $"Selection: {args.Ranges?.Count ?? 0} range(s)";
    }
    
    private void OnCursorActivity(CursorActivityEventArgs args)
    {
        cursorLine = args.Line;
        cursorColumn = args.Column;
    }
    
    private void OnFocus(CodeMirrorFocusEventArgs args)
    {
        statusText = "Editor focused";
    }
    
    private void OnBlur(CodeMirrorFocusEventArgs args)
    {
        statusText = "Editor blurred";
    }
}